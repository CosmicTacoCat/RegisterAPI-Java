package edu.uark.commands.transactions;

import org.apache.commons.lang3.StringUtils;

import edu.uark.commands.ResultCommandInterface;
import edu.uark.controllers.exceptions.ConflictException;
import edu.uark.controllers.exceptions.UnprocessableEntityException;
import edu.uark.models.api.Transaction;
import edu.uark.models.entities.TransactionEntity;
import edu.uark.models.entities.ProdInTransEntity;
import edu.uark.models.repositories.TransactionRepository;
import edu.uark.models.repositories.ProdInTransRepository;
import edu.uark.models.repositories.interfaces.TransactionRepositoryInterface;
import edu.uark.models.repositories.interfaces.ProdInTransRepositoryInterface;
import java.util.ArrayList;

public class TransactionCreateCommand implements ResultCommandInterface<Transaction> {
	@Override
	public Transaction execute() {
		//Validations
		/*if (StringUtils.isBlank(this.apiProduct.getLookupCode())) {
			throw new UnprocessableEntityException("lookupcode");
		}*/

		TransactionEntity transactionEntity = this.transactionRepository.byTransaction_Id(String.valueOf(this.apiTransaction.getTrans_Id()));
		if (transactionEntity != null) {
			throw new ConflictException("trans_id"); //Transaction ID already defined for another Transaction.
		}
		
		//No ENTITY object was returned from the database, thus the API object's Transaction id must be unique.
		transactionEntity = new TransactionEntity(apiTransaction); //Create a new ENTITY object from the API object details.
		transactionEntity.save(); //Write, via an INSERT, the new record to the database.

		ProdInTransEntity prodintransEntity = this.prodintransRepository.byTransaction_Id(this.apiTransaction.getTrans_Id());

		prodintransEntity = new ProdInTransEntity(apiTransaction);
		prodintransEntity.save();
		
		this.apiTransaction.setId(transactionEntity.getId()); //Synchronize information generated by the database upon INSERT.
		this.apiTransaction.setCreatedOn(transactionEntity.getCreatedOn());

		return this.apiTransaction;
	}

	//Properties
	private Transaction apiTransaction;
	public Transaction getApiTransaction() {
		return this.apiTransaction;
	}
	public TransactionCreateCommand setApiTransaction(ArrayList<Transaction> apiTransaction) {
		//for(int i =0; i<apiTransaction.size(); i++)
		//{
			//This just keeps setting the Id of the single apiTransaction in this class.
			//So only the last Transaction object on the arraylist affects it in the end.
			//Also, this.apiTransaction is still null when the below line is executed. (Null exception)
			//this.apiTransaction.setId(apiTransaction.get(i).getId());
			this.apiTransaction = apiTransaction.get(0);
		//}
		return this;
	}

	private Transaction apiProdinTrans;
	public Transaction getApiProdinTrans() {
		return this.apiProdinTrans;
	}
	public TransactionCreateCommand setApiProdinTrans(ArrayList<Transaction> apiProdinTrans) {
		for(int i =0; i<apiProdinTrans.size(); i++)
		{
			this.apiProdinTrans.setId(apiProdinTrans.get(i).getId());
			this.apiProdinTrans.setTrans_Id(apiProdinTrans.get(i).getTrans_Id());
			this.apiProdinTrans.setProduct_Id(apiProdinTrans.get(i).getProduct_Id());
			this.apiProdinTrans.setQuantity(apiProdinTrans.get(i).getQuantity());
		}
		return this;
	}
	
	private TransactionRepositoryInterface transactionRepository;
	public TransactionRepositoryInterface getTransactionRepository() {
		return this.transactionRepository;
	}
	public TransactionCreateCommand setTransactionRepository(TransactionRepositoryInterface transactionRepository) {
		this.transactionRepository = transactionRepository;
		return this;
	}
	
	private ProdInTransRepositoryInterface prodintransRepository;
	public ProdInTransRepositoryInterface getProdInTransRepository() {
		return this.prodintransRepository;
	}
	public TransactionCreateCommand setTransactionRepository(ProdInTransRepositoryInterface prodintransRepository) {
		this.prodintransRepository = prodintransRepository;
		return this;
	}

	public TransactionCreateCommand() {
		this.transactionRepository = new TransactionRepository();
	} 
}